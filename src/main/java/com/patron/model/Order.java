/**
 * @author James Whiteman
 *
 * Device ID:
 * The device ID is the APID generated by Urban Airship.
 * It uniquely identifies the device running the application.
 *
 * Device Type:
 * The device type specifies what kind of device is placing
 * the order. This information is needed by Urban Airship.
 * 0 = iPhone
 * 1 = Android
 * 2 = Windows 8
 * 3 = Windows Mobile
 * 4 = Blackberry
 *
 */

package com.patron.model;

import java.math.BigDecimal;
import java.util.List;
import java.math.RoundingMode;
import java.lang.Exception;

import com.patron.system.Globals;
import com.patron.model.Station;
import com.patron.model.Card;
import com.patron.model.Funder;
import com.patron.model.Vendor;
import com.patron.model.User;

import com.google.gson.Gson;

public class Order
{
	// Constants
	public enum Status
	{
		WAITING, READY, SCANNED, COMPLETED, REJECTED
	}

	// Properties
	private String id;
	private Vendor vendor;
	private User patron;
	private String deviceId;
	private int deviceType;
	private List<Fragment> fragments;
	private Status status;
	private Station station;
	private Funder funder;
	private BigDecimal tip;
    private BigDecimal tax;
	private List<Object> coupons;
	private String comment;

	// Constructor
	public Order(String id, Vendor vendor, User patron, List<Fragment> fragments, Status status, Station station,
		Funder funder, BigDecimal tip, List<Object> coupons, String comment)
	{
		setId(id);
		setVendor(vendor);
		setPatron(patron);
		setDeviceId(Globals.getDeviceId());
		setDeviceType(1);
		setFragments(fragments);
		setStatus(status);
		setStation(station);
		setFunder(funder);
		setTip(tip);
		setCoupons(coupons);
		setComment(comment);
	}

	// Main Methods
	public BigDecimal getTotalPrice()
	{
		BigDecimal total = new BigDecimal(0);
        if (fragments != null)
		for (int i = 0; i < fragments.size(); i++)
		{
			total = total.add(fragments.get(i).getPrice());
		}
		total = total.add(getTax());
		total = total.add(getTip());
		total = total.setScale(2, RoundingMode.FLOOR);
		return total;
	}

    public BigDecimal getPrice()
    {
		BigDecimal total = new BigDecimal(0);
        if (fragments != null)
		for (int i = 0; i < fragments.size(); i++)
		{
			total = total.add(fragments.get(i).getPrice());
		}
		total = total.setScale(2, RoundingMode.FLOOR);
		return total;
    }

    public BigDecimal getTax()
    {
		BigDecimal total = new BigDecimal(0);
        if (fragments != null)
		for (int i = 0; i < fragments.size(); i++)
		{
			total = total.add(fragments.get(i).getPrice());
		}
        BigDecimal tax = total.multiply(new BigDecimal(Globals.getVendor().getTaxRate()));
        tax = tax.setScale(2, RoundingMode.FLOOR);
        return tax;
    }

    public BigDecimal getTipPercent()
    {
        BigDecimal total = new BigDecimal(0);
        if (fragments != null)
        for (int i = 0; i < fragments.size(); i++)
        {
            total = total.add(fragments.get(i).getPrice());
        }
        if  (tip.compareTo(BigDecimal.ZERO) != 0)
        {
            return tip.divide(total, 2, BigDecimal.ROUND_HALF_EVEN);
        }
        return new BigDecimal(0);
    }

	public static Status getIntStatus(int i)
	{
		switch (i)
		{
		case 0:
			return Status.WAITING;
		case 1:
			return Status.READY;
		case 2:
			return Status.SCANNED;
		case 3:
			return Status.COMPLETED;
		default:
			return Status.REJECTED;
		}
	}

	public static int getStatusInt(Status status)
	{
		switch (status)
		{
		case WAITING:
			return 0;
		case READY:
			return 1;
		case SCANNED:
			return 2;
		case COMPLETED:
			return 3;
		default:
			return 4;
		}
	}

	public static String getStatusText(Status status)
	{
		switch (status)
		{
		case WAITING:
			return "Waiting";
		case READY:
			return "Ready";
		case SCANNED:
			return "Scanned";
		case COMPLETED:
			return "Completed";
		default:
			return "Rejected";
		}
	}

	public String getOrderText()
	{
		String s = "";
		for (int i = 0; i < fragments.size(); i++)
		{
			if (i > 0)
			{
				s = s + "\n";
			}
			Fragment fragment = fragments.get(i);
			int quantity = fragments.get(i).getQuantity();
			String name;
			if (fragments.get(i).getItem() != null &&
					fragments.get(i).getItem().getName() != null)
			{
				name = fragments.get(i).getItem().getName();
			}
			else
			{
				name = "";
			}
			s = s + quantity  +
					"\u0009" +
					name;
			for (int j = 0; j < fragment.getSelections().size(); j++)
			{
				if (j == 0)
				{
					s = s + " with ";
				}
				else
				{
					s = ", ";
				}
				String optionName = fragment.getSelections().get(j).getOption().getName();
				s = s + optionName;
			}
		}
		return s;
	}

	// Setters
	public void setId(String id)
	{
		this.id = id;
	}

	public void setVendor(Vendor vendor)
	{
		this.vendor = vendor;
	}

	public void setPatron(User patron)
	{
		this.patron = patron;
	}

	private void setDeviceId(String deviceId)
	{
		this.deviceId = deviceId;
	}

	private void setDeviceType(int deviceType)
	{
		this.deviceType = deviceType;
	}

	public void setFragments(List<Fragment> fragments)
	{
		this.fragments = fragments;
	}

	public void setStatus(Status status)
	{
		this.status = status;
	}

	public void setStation(Station station)
	{
		this.station = station;
	}

	public void setFunder(Funder funder)
	{
		this.funder = funder;
	}

	public void setTip(BigDecimal tip)
	{
		this.tip = tip;
	}

	public void setCoupons(List<Object> coupons)
	{
		this.coupons = coupons;
	}

	public void setComment(String comment)
	{
		this.comment = comment;
	}

	// Getters
	public String getId()
	{
		return id;
	}

	public Vendor getVendor()
	{
		return vendor;
	}

	public User getPatron()
	{
		return patron;
	}

	public String getDeviceId()
	{
		return deviceId;
	}

	public int getDeviceType()
	{
		return deviceType;
	}

	public List<Fragment> getFragments()
	{
		return fragments;
	}

	public Status getStatus()
	{
		return status;
	}

	public Station getStation()
	{
		return station;
	}

	public Funder getFunder()
	{
		return funder;
	}

	public BigDecimal getTip()
	{
		return tip;
	}

	public List<Object> getCoupons()
	{
		return coupons;
	}

	public String getComment()
	{
		return comment;
	}
}
